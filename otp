#!/usr/bin/env python
#
# One-Time Password Generator
#
# Author: Peter Pakos <peter.pakos@wandisco.com>

from __future__ import print_function

import argparse
import os
import sys
import pyotp


class Main(object):
    _version = '16.8.15'
    _name = os.path.basename(sys.argv[0])

    def __init__(self):
        self._key_file = os.path.expanduser('~') + '/.otpkeys'
        self._args = self._parse_args()
        self._keys = {}
        if os.path.isfile(self._key_file):
            with open(self._key_file, 'r') as f:
                for line in f:
                    if line != '\n':
                        service = line.partition('=')[0].strip()
                        key = line.partition('=')[2].strip().replace(' ', '')
                        self._keys[service] = key

    def __del__(self):
        pass

    def _parse_args(self):
        parser = argparse.ArgumentParser(description='One-Time Password Generator')
        parser.add_argument('--version', action='version', version='%s %s' % (self._name, self._version))
        parser.add_argument('key', help='key or service name from ~/.otpkeys')

        return parser.parse_args()

    @staticmethod
    def die(message=None, code=1):
        if message:
            print(message, file=sys.stderr)
        exit(code)

    @staticmethod
    def totp(key):
        try:
            code = pyotp.TOTP(key).now()
            return code
        except TypeError:
            return 'KEY ERROR'

    def run(self):
        if self._args.key in self._keys:
            print('%s OTP: %s' % (self._args.key, self.totp(self._keys[self._args.key])))
        else:
            print('OTP: %s' % self.totp(self._args.key))


if __name__ == '__main__':
    try:
        main = Main()
        main.run()
    except KeyboardInterrupt:
        print('\nCancelling...')
